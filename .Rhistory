Training = Training[, -High_cor_var]
Testing = Testing[, -High_cor_var]
dim(Training);dim(Testing)
answers <- predict(Model_RF, Testing)
answers
shiny::runApp('Studing/shiny/HelloWorld')
runApp('Studing/shiny/HelloWorld')
runApp('Studing/shiny/HelloWorld')
runApp('Studing/shiny/HelloWorld')
runApp('Studing/shiny/HelloWorld')
runApp('Studing/shiny/HelloWorld')
runApp('Studing/shiny/HelloWorld')
runApp('Studing/shiny/HelloWorld')
runApp('Studing/shiny/HelloWorld')
runApp('Studing/shiny/HelloWorld')
data.frame(
mpg = 10:35, mpgsp = ifelse(10:35>20,10:35-20,0)
)
runApp('Studing/shiny/HelloWorld')
runApp('Studing/shiny/HelloWorld')
?plotOutput
library(miniUI)
install.packages('miniUI')
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("My fitst Gadget")
)
server <- function(input,output,session){
observeEvent(input$done,{stopApp()})
}
runGadget(ui,seerver)
}
myFirstGadget()
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("My fitst Gadget")
)
server <- function(input,output,session){
observeEvent(input$done,{stopApp()})
}
runGadget(ui,server)
}
myFirstGadget()
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("My fitst Gadget")
)
server <- function(input,output,session){
observeEvent(input$done,{stopApp()})
}
runGadget(ui,server)
}
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("My fitst Gadget")
)
server <- function(input,output,session){
observeEvent(input$done,{stopApp()})
}
runGadget(ui,server)
}
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("My fitst Gadget")
)
server <- function(input,output,session){
observeEvent(input$done,{stopApp()})
}
runGadget(ui,server)
}
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("My fitst Gadget")
)
server <- function(input,output,session){
observeEvent(input$done,{stopApp()})
}
runGadget(ui,server)
}
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("My fitst Gadget")
)
server <- function(input,output,session){
observeEvent(input$done,{stopApp()})
}
runGadget(ui,server)
}
library(rattle)
install.packages('rattle')
library(rattle)
install.packages('rattle')
setwd('/Users/freefrog/Studing/DataScience/Practical_ML')
Train_Data <- read.csv('pml-training.csv',na.strings=c("", "NA", "NULL"))
Test_Data <- read.csv('pml-testing.csv', na.strings=c("", "NA", "NULL"))
Train_na_variables <- which(colSums(is.na(Train_Data))==0)
Training <- Train_Data[,Train_na_variables]
dim(Training)
knitr::opts_chunk$set(echo = TRUE)
# first set working directory
setwd('/Users/freefrog/Studing/DataScience/Practical_ML')
# read .csv file
# !!! How to treat na values are very important!!!
Train_Data <- read.csv('pml-training.csv',na.strings=c("", "NA", "NULL"))
Test_Data <- read.csv('pml-testing.csv', na.strings=c("", "NA", "NULL"))
dim(Train_Data);dim(Test_Data)
# find all variables contain NA values
Train_na_variables <- which(colSums(is.na(Train_Data))==0)
Test_na_variables <- which(colSums(is.na(Test_Data))==0)
# or find variables which has more than 95% NA values
# Train_na_Variables <- sapply(Train_Data, function(x) mean(is.na(x))) > 0.95
# Test_na_Variables <- sapply(Test_Data, function(x) mean(is.na(x))) > 0.95
Training <- Train_Data[,Train_na_variables]
Testing <- Test_Data[,Test_na_variables]
dim(Training);dim(Testing)
# find uncorrelated variables
remove = c('X', 'user_name', 'raw_timestamp_part_1', 'raw_timestamp_part_2', 'cvtd_timestamp', 'new_window', 'num_window')
Training <- Training[,-which(names(Training) %in% remove)]
Testing <- Testing[,-which(names(Testing) %in% remove)]
dim(Training);dim(Testing)
library(caret)
# using nearZeroVar to get those low variance variables, this only can apply on numeric formate.
zeroVar = nearZeroVar(Training[,sapply(Training, is.numeric)],
saveMetrics = TRUE)
Training = Training[,zeroVar[, 'nzv']==0]
Testing = Testing[,zeroVar[, 'nzv']==0]
dim(Training);dim(Testing)
# using cor to get thee correlation of all numeric variables
corrMatrix <- cor(Training[sapply(Training, is.numeric)])
# set grid
corrDF <- expand.grid(row = 1:dim(corrMatrix)[1],
col = 1:dim(corrMatrix)[2])
# set data to vector so that can be plot
corrDF$correlation <- as.vector(corrMatrix)
# using levelplot to show the relationship between all those variables.
levelplot(correlation ~ row+ col, corrDF)
# find high correlated variables( >90% )
High_cor_var = findCorrelation(corrMatrix,
cutoff = .90,
verbose = TRUE)
Training = Training[, -High_cor_var]
Testing = Testing[, -High_cor_var]
dim(Training);dim(Testing)
?train
getModelInfo()
aaa<-getModelInfo()
aaa$gbm
Model_BoostTree <- train(classe ~ ., method="gbm",data=Training,verbose=FALSE)
Model_BoostTree <- train(classe ~ ., method="gbm",data=Training,verbose=FALSE)
Model_BoostTree
?gbm
Model_BoostTree <- gbm(classe~., data = Training, verbose = FALSE)
Model_BoostTree
pred_BT_Train <- predict(Model_BoostTree, newdata = Training)
Model_BoostTree$n.trees
Model_BoostTree$finalmodel
Model_BoostTree$treees
Model_BoostTree$trees
pred_BT_Train <- predict(Model_BoostTree, newdata = Training,n.trees = 100)
?gbm
best.iter <- gbm.perf(Model_BoostTree
,method="OOB")
print(best.iter)
best.iter <- gbm.perf(Model_BoostTree,method="cv")
print(best.iter)
pred_BT_Train <- predict(Model_BoostTree, newdata = Training,n.trees = 100)
confusionMatrix(pred_BT_Train , Training$classe)
pred_BT_Train <- predict(Model_BoostTree, newdata = Training,n.trees = 1)
confusionMatrix(pred_BT_Train , Training$classe)
Model_BoostTree <- train(classe ~ .,
method="gbm",
data=Training,
verbose=FALSE)
pred_BT_Train <- predict(Model_BoostTree, newdata = Training)
confusionMatrix(pred_BT_Train , Training$classe)
outcome_BT_Train <- confusionMatrix(pred_BT_Train , Training$classe)
Outcome_BT_Train <- confusionMatrix(pred_BT_Train , Training$classe)
Outcome_BT_Train$overall
Outcome_BT_Train$overall[1]
Model_LDA <- train(classe ~ ., method="lda", preProcess="pca", data=Training)
Pred_LDA_Train <- predict(Model_LDA, newdata = Training)
Outcome_LDA_Train <- confusionMatrix(pred_LDA_Train , Training$classe)
Outcome_LDA_Train$overall[1]
Outcome_LDA_Train <- confusionMatrix(Pred_LDA_Train , Training$classe)
Outcome_LDA_Train$overall[1]
Model_LDA <- train(classe ~ .,
method="lda",
preProcess="pca",
data=Training,
trainControl(preProcOptions = list(thresh = 0.90)))
ctr1<-trainControl(preProcOptions = list(thresh = 0.90))
ctr1
ctr1<-trainControl(preProcOptions = 0.9)
ctr1
Model_LDA <- train(classe ~ .,
method="lda",
preProcess="pca",
data=Training,
trControl = trainControl(preProcOptions = list(thresh = 0.90)))
Pred_LDA_Train <- predict(Model_LDA, newdata = Training)
Outcome_LDA_Train <- confusionMatrix(Pred_LDA_Train , Training$classe)
Outcome_LDA_Train$overall[1]
dim(Training)
names(Training)
preproc <- preProcess(Training[,-46], method="pca", pcaComp=10)
trainingPC<-predict(preproc, Training[,-46]);
dim(training)
dim(trainingPC)
preproc
Model_LDA <- train(classe ~ .,
method="lda",
preProcess="pca",
data=Training)
Pred_LDA_Train <- predict(Model_LDA, newdata = Training)
Outcome_LDA_Train <- confusionMatrix(Pred_LDA_Train , Training$classe)
Outcome_LDA_Train$overall[1]
trainingPC <- predict(preproc, Training[,-46]);
Pre_Proc_Train <- preProcess(Training[,-46], method="pca", pcaComp=10)
TrainingPC <- predict(Pre_Proc_Trainc, Training[,-46]);
Model_NB  <- NaiveBayes(Training$classe ~ ., data=TrainingPC);
Pre_Proc_Train <- preProcess(Training[,-46], method="pca", pcaComp=10)
TrainingPC <- predict(Pre_Proc_Train, Training[,-46]);
Model_NB  <- NaiveBayes(Training$classe ~ ., data=TrainingPC);
library(klaR)
install.packages('klaR')
library(klaR)
library(klaR)
Pre_Proc_Train <- preProcess(Training[,-46], method="pca", pcaComp=10)
TrainingPC <- predict(Pre_Proc_Train, Training[,-46]);
Model_NB  <- NaiveBayes(Training$classe ~ ., data=TrainingPC);
library(klaR)
# preprocess befor fit the Naive Bayes method
Pre_Proc_Train <- preProcess(Training[,-46], method="pca", pcaComp=10)
TrainingPC <- predict(Pre_Proc_Train, Training[,-46])
Model_NB  <- NaiveBayes(Training$classe ~ ., data=TrainingPC)
Pred_NB_Train <- predict(Model_NB, newdata = Training)
library(klaR)
# preprocess befor fit the Naive Bayes method
Pre_Proc_Train <- preProcess(Training[,-46], method="pca", pcaComp=10)
TrainingPC <- predict(Pre_Proc_Train, Training[,-46])
Model_NB  <- NaiveBayes(Training$classe ~ ., data=TrainingPC)
Pred_NB_Train <- predict(Model_NB, newdata = TrainingPC)
Outcome_NB_Train <- confusionMatrix(Pred_NB_Train , Training$classe)
TestingPC<-predict(Pre_Proc_Train, testing[,-46])
TestingPC<-predict(Pre_Proc_Train, Testing[,-46])
Pred_NB_Train <- predict(Model_NB, newdata = TestingPC)
Outcome_NB_Train <- confusionMatrix(Pred_NB_Train , Testing$classe)
dim(Pred_NB_Train)
length(Pred_NB_Train)
Pre_Proc_Train <- preProcess(Training[,-46], method="pca", pcaComp=10)
TrainingPC <- predict(Pre_Proc_Train, Training[,-46])
Pre_Proc_Train
head(TrainingPC)
dim(TrainingPC)
Model_NB
predict(Model_NB, newdata = TestingPC)$class
predict(Model_NB, newdata = TrainingPC)$class
Pred_NB_Train<-predict(Model_NB, newdata = TrainingPC)$class
length(Pred_NB_Train)
library(klaR)
# preprocess befor fit the Naive Bayes method
Pre_Proc_Train <- preProcess(Training[,-46], method="pca", pcaComp=10)
TrainingPC <- predict(Pre_Proc_Train, Training[,-46])
Model_NB  <- NaiveBayes(Training$classe ~ ., data=TrainingPC)
Pred_NB_Train <- predict(Model_NB, newdata = TrainingPC)$class
Outcome_NB_Train <- confusionMatrix(Pred_NB_Train , Training$classe)
Outcome_NB_Train$overall[1]
library(rpart)
set.seed(12345)
modFitDT <- rpart(classe ~ ., data = Training_Data,
method="class",
control = rpart.control(method = "cv",
number = 10))
rpart.plot(modFitDT, main = "Classification Tree")
library(rpart.plot)
install.packages('raprt.plot')
library(rpart.plot)
install.packages('raprt.plot')
install.packages('rpart.plot')
library(rpart.plot)
library(rpart)
library(rpart.plot)
set.seed(12345)
modFitDT <- rpart(classe ~ ., data = Training_Data,
method="class",
control = rpart.control(method = "cv",
number = 10))
rpart.plot(modFitDT, main = "Classification Tree")
# text(modFitDT,cex=.8)
?rpart.plot
library(rpart)
library(rpart.plot)
set.seed(12345)
modFitDT <- rpart(classe ~ ., data = Training_Data,
method="class",
control = rpart.control(method = "cv",
number = 10))
rpart.plot(modFitDT, main = "Classification Tree")
Pre_Tree <- predict(modFitDT, Testing_Data, type = "class")
confusionMatrix(Pre_Tree, Testing_Data$classe)
ls
sls
clc
days<-1:60
days
zizu<-(365-days)*8300/(12*365)
zizu
zizu<-(365-days)*(8300*12)/365
zizu
compare_rent <- data.frame(days, zizu)
compare_rent
tuoguan_first_month <- (365-first_month)*(8300*12/365)-(8300*12*0.08)
first_month <- 1:30
second_month <- 31:60
tuoguan_first_month <- (365-first_month)*(8300*12/365)-(8300*12*0.08)
tuoguan_second_month <- (8300/2)+(365-second_month)*(8300*12/365)-(8300*12*0.064)
compare_rent <- data.frame(days, zizu,c(tuoguan_first_month,tuoguan_second_month))
plot(zizu~days,data = compare_rent)
plot(zizu~days,data = compare_rent)
?plot
compare_rent <- data.frame(days, zizu,c(tuoguan_first_month,tuoguan_second_month),type='l')
compare_rent <- data.frame(days, zizu,c(tuoguan_first_month,tuoguan_second_month),type='l')
compare_rent <- data.frame(days, zizu,c(tuoguan_first_month,tuoguan_second_month))
head(compare_rent)
compare_rent <- data.frame(days, zizu,tuoguan = c(tuoguan_first_month,tuoguan_second_month))
head(compare_rent)
plot(zizu~days,data=compare_rent,type='l')
lines(tuoguan)
?lines
lines(tuoguan,data = compare_rent,type='l')
abline(tuoguan,data = compare_rent,type='l')
abline(compare_rent$tuoguan)
lines(tuoguan,col = “red”, lwd = 4, lay = 2)
lines(tuoguan,col = 'red', lwd = 4, lay = 2)
plot(zizu~days,data=compare_rent,type='l')
lines(tuoguan,col = 'red', lwd = 4, lay = 2)
lines(compare_rent$tuoguan,col = 'red', lwd = 4, lay = 2)
lines(compare_rent$tuoguan,col = 'red', lwd = 4)
lines(compare_rent$tuoguan,col = 'red', lwd = 2)
zhongtian <- (365-days)*(8000*12/365)-8000
zhongtian <- (365-days)*(8000*12/365)-8000
compare_rent <- data.frame(days, zizu,
tuoguan = c(tuoguan_first_month,tuoguan_second_month),
zhongtian)
compare_rent <- data.frame(days, zizu,
tuoguan = c(tuoguan_first_month,tuoguan_second_month),
zhongtian)
plot(zizu~days,data=compare_rent,col = 'black',type='l', lwd = 2)
lines(compare_rent$tuoguan,col = 'red', lwd = 2)
lines(compare_rent$zhongtian,col = 'blue', lwd = 2)
compare_rent <- data.frame(days, zizhu,
tuoguan = c(tuoguan_first_month,tuoguan_second_month),
zhongtian,
xlim = '年租金')
plot(zizu~days,data=compare_rent,col = 'black',type='l', lwd = 2)
lines(compare_rent$tuoguan,col = 'red', lwd = 2)
lines(compare_rent$zhongtian,col = 'blue', lwd = 2)
compare_rent <- data.frame(days, zizu,
tuoguan = c(tuoguan_first_month,tuoguan_second_month),
zhongtian,
xlim = '年租金')
plot(zizu~days,data=compare_rent,col = 'black',type='l', lwd = 2)
lines(compare_rent$tuoguan,col = 'red', lwd = 2)
lines(compare_rent$zhongtian,col = 'blue', lwd = 2)
compare_rent <- data.frame(days, zizu,
tuoguan = c(tuoguan_first_month,tuoguan_second_month),
zhongtian,
ylab = '年租金')
plot(zizu~days,data=compare_rent,col = 'black',type='l', lwd = 2)
lines(compare_rent$tuoguan,col = 'red', lwd = 2)
lines(compare_rent$zhongtian,col = 'blue', lwd = 2)
compare_rent <- data.frame(days, zizu,
tuoguan = c(tuoguan_first_month,tuoguan_second_month),
zhongtian,
ylab = '年租金')
plot(zizu~days,data=compare_rent,col = 'black',type='l', lwd = 2)
lines(compare_rent$tuoguan,col = 'red', lwd = 2)
lines(compare_rent$zhongtian,col = 'blue', lwd = 2)
rent_per_month <- 7500:9000
1144+1942
install.packages('plotly')
library('plotly')
plot_ly(mtcars, x = wt, y = mpg, mode = 'markers')
?plot_ly
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = 'markers')
plot_ly(mtcars, x = ~wt, y = ~mpg)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = 'scatter')
plot_ly(mtcars, x = ~wt, y = ~mpg, type = 'scatter', mode = 'markers')
plot_ly(mtcars, x = ~wt, y = ~mpg, type = 'surface', mode = 'markers')
plot_ly(mtcars, x = ~wt, y = ~mpg, type = 'scatter', mode = 'markers',color =I('red'))
names(mtcars)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = 'scatter', mode = 'markers',color = disp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = 'scatter', mode = 'markers',color = ~disp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = 'scatter', mode = 'markers',color = ~cyl)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = 'scatter', mode = 'markers',color = ~cyl,size = ~hp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = 'scatter', mode = 'markers',color = ~cyl,z = ~hp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = 'scatter3D', mode = 'markers',color = ~cyl,z = ~hp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = 'scatter3d', mode = 'markers',color = ~cyl,z = ~hp)
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets)
names(EuStockMarkets)
dim(EuStockMarkets)
head(EuStockMarkets)
stocks[1][1]
stocks[0][0]
stocks[1][0]
stocks[1][1]
stocks[1][1][1]
stocks[1,1]
stocks[0,0]
stocks[1,1]
head(stocks)
dim(stocks)
names(stocks)
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index,pric)
head(stocks)
table(stocks$index)
dim(stocks)
time(EuStockMarkets)
head(EuStockMarkets)
head(time(EuStockMarkets))
dim(time(EuStockMarkets))
length(time(EuStockMarkets))
?time
EuStockMarkets[1,]
EuStockMarkets[1,1]
EuStockMarkets[1,1,1]
EuStockMarkets$time
time(data.frame(x=1,y=2))
time(data.frame(x=c(1,2,3),y=c(2,4,5))
)
time(data.frame(x=c(1,2,3),y=c(2,4,5)))
time(mtcars)
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index,pric) %>%
mutate(tim=rep(time(EuStockMarkets),4))
head(stocks)
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index,pric) %>%
mutate(time=rep(time(EuStockMarkets),4))
head(stocks)
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index,price) %>%
mutate(time=rep(time(EuStockMarkets),4))
head(stocks)
plot_ly(stocks, x=time, y = price, color= index)
plot_ly(stocks, x=~time, y = ~price, color= ~index)
?plot_ly
plot_ly(stocks, x=~time, y = ~price, color= ~index, type = 'line')
plot_ly(stocks, x=~time, y = ~price, color= ~index, type = 'scatter')
state_pop <- data.frame(State = state.abb, Pop = as.vcter(state.x77[,1]))
state_pop <- data.frame(State = state.abb, Pop = as.vecter(state.x77[,1]))
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
state.abb
state.x77
state_pop$hover <- with(state_pop, paste(State, '<br>',"Population:",Pop))
head(state_pop)
borders <- list(color = toRGB('red'))
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlaks = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z= ~Pop, text = ~hover, locations = ~State,
typ = 'choropleth', locationmode = 'USA-states',
color = Pop, colors = 'blues', marker = list(line = borders))
plot_ly(state_pop, z= ~Pop, text = ~hover, locations = ~State,
typ = 'choropleth', locationmode = 'USA-states',
color = ~Pop, colors = 'blues', marker = list(line = borders))
plot_ly(state_pop, z= ~Pop, text = ~hover, locations = ~State,
typ = 'choropleth', locationmode = 'USA-states',
color = ~Pop, colors = 'Blues', marker = list(line = borders))
plot_ly(state_pop, z= ~Pop, text = ~hover, locations = ~State,
typ = 'choropleth', locationmode = 'USA-states',
color = ~Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'ss', geo = map_options)
plot_ly(state_pop, z= ~Pop, text = ~hover, locations = ~State,
type = 'choropleth', locationmode = 'USA-states',
color = ~Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'ss', geo = map_options)
plot_ly(state_pop, z= ~Pop, text = ~hover, locations = ~State,
type = 'choropleth', locationmode = 'USA-states',
color = ~Pop, colors = 'Blues', marker = list(line = borders))
plot_ly(state_pop, z= ~Pop, text = ~hover, locations = ~State,
type = 'choropleth', locationmode = 'USA-states',
color = ~Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'ss', geo = map_options)
plot_ly(state_pop, z= ~Pop, text = ~hover, locations = ~State,
type = 'choropleth', locationmode = 'USA-states',
color = ~Pop, colors = 'Yellows', marker = list(line = borders)) %>%
layout(title = 'ss', geo = map_options)
plot_ly(state_pop, z= ~Pop, text = ~hover, locations = ~State,
type = 'choropleth', locationmode = 'USA-states',
color = ~Pop, colors = 'Reds', marker = list(line = borders)) %>%
layout(title = 'ss', geo = map_options)
